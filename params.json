{"name":"Bluecompiler","tagline":"This is a barebones compiler written with the project IFC Allignment in mind.","body":"Welcome to BlueCompiler! \r\n===================\r\n![enter image description here](https://lh5.googleusercontent.com/DXaAlI3SBkadm9BNQMgcCPtTcgTGLZ3gZhRAytdIdw=s0)\r\n\r\nThis is a barebones compiler written with the project [IFC Allignment](https://www.cms.bgu.tum.de/de/forschung/projekte/31-forschung/projekte/411-ifcalignment) in mind.  The interpreter was written in C++ for the project but it has scope to be plugged in with an LLVM implementation (refer developer documentation for details). A complete list of supported tokens and the supported inbuilt functions are provided below. A example program is also included to showcase what this language can do.\r\n\r\nFeel free to extend and modify the source code as you please but please remember to provide references to this repo.\r\n\r\n\r\nLogical components\r\n----------------------------------------------\r\n\r\n![enter image description here](https://lh3.googleusercontent.com/-0ezxCgqcDG8/VI2jJbJojcI/AAAAAAAABrU/Jk8Jt0CUZd8/s0/Screen+Shot+2014-12-14+at+15.42.18+1.png \"Compiler Logical Components\")\r\n\r\n\r\n\r\nLanguage Layout\r\n----------------------------------------------\r\n\r\nThe basic programming language that the compiler understands is organised in blocks. An overview of the language that the compiler understands:\r\n\r\n\r\n![enter image description here](https://lh4.googleusercontent.com/-H8XpEukV78A/VI25O6bzXMI/AAAAAAAABr0/9SCisNK9Z_4/s0/Screen+Shot+2014-12-14+at+16.10.59.png \"Program structure Example\")\r\n\r\n\r\n\r\nProgramming with the Language\r\n----------------------------------------------\r\nThe compiler reads a program from the file. It currenly only understands the txt files with `.txt` extension.\r\nTo get a better flavour of what BlueCompiler can actually do, please refer the example program for Ifc Allignment: ClothoidIFCPL.txt.\r\n\r\nHere is a simple example program:\r\n\r\n\t{\r\n\t\r\n\tfunc computeX(double L,double A)\r\n\t{\r\n\t\tx = L;\r\n\t\titerations = 5;\r\n\t\ti = 1;\r\n\t\twhile(i < 6) do\r\n\t\t{\r\n\t\t\tsign = sgnEven(i);\r\n\t\t\r\n\t\t\tL_exponent = 5 + (i - 1) * 4.0;\r\n\r\n\t\t\tA_exponent = i*4.0;\r\n\t\t\tAtemp = factorial(2.0*i);\r\n\t\t\tB = pow(2.0, 2.0*i);\r\n\t\t\tC = 5.0 + (i - 1) * 4;\r\n\t\t\tfactor = Atemp * B * C;\r\n\t\t\r\n\r\n\t    \tD = pow(L, L_exponent);\r\n\t\t\tE = factor * pow(A, A_exponent);\r\n\t\t\tx = x + (sign * (D / E));\r\n\t\t\ti = i + 1;\r\n\t\t}; # while ends here\r\n\r\n\t\treturn x;\r\n\t\r\n\t}; # func computeX() ends here\t\r\n\r\n\t}; # program block ends here\r\n\r\n\r\nRailroad Diagrams for the Grammar\r\n----------------------------------------------\r\nThe grammar is the star of the show here, so if things start getting confusing please revert to the full blown html which can be found in the repo as Grammar.html\r\n\r\n![enter image description here](https://lh3.googleusercontent.com/-TuKrJkAMc1g/VI3JejsrYbI/AAAAAAAABsI/5hqzJBVIVJU/s0/array.png \"array.png\")\r\n\r\n![enter image description here](https://lh5.googleusercontent.com/-ZdqNqg_ZffA/VI3Jw75sWpI/AAAAAAAABsU/mnpKxpkMhHE/s0/arrExpression.png \"arrExpression.png\")\r\n\r\n![enter image description here](https://lh6.googleusercontent.com/-z6pPnujtJDA/VI3J3WKDlWI/AAAAAAAABsg/p2iMh9ikmIc/s0/Assignment.png \"Assignment.png\")\r\n\r\n![enter image description here](https://lh3.googleusercontent.com/-ERgXPQNBMig/VI3J-Gq55GI/AAAAAAAABss/tIjp-61N728/s0/Block.png \"Block.png\")\r\n\r\n![enter image description here](https://lh6.googleusercontent.com/-LszOKb29oBw/VI3KEJwgyxI/AAAAAAAABs4/QGrT70OWxiE/s0/call.png \"call.png\")\r\n\r\n![enter image description here](https://lh4.googleusercontent.com/-eSKVTHq-16o/VI3KJq4Qe8I/AAAAAAAABtE/sed2iq7nnjk/s0/Expression.png \"Expression.png\")\r\n\r\n![enter image description here](https://lh6.googleusercontent.com/-wYe7m6CuACU/VI3KdR9_vyI/AAAAAAAABtQ/ygzKg1VtzYw/s0/func.png \"func.png\")\r\n\r\n![enter image description here](https://lh4.googleusercontent.com/-YT0Clc4mlxA/VI3KjEJCP8I/AAAAAAAABtc/8bvsOb8mXBM/s0/ifStmt.png \"ifStmt.png\")\r\n\r\n![enter image description here](https://lh4.googleusercontent.com/-c6VqKPuXWps/VI3KodoNzqI/AAAAAAAABto/PimihaYzUoU/s0/Program.png \"Program.png\")\r\n\r\n![enter image description here](https://lh4.googleusercontent.com/-DIX3-HNow_M/VI3KtZtVwkI/AAAAAAAABt0/2tvho8L8nAs/s0/Return.png \"Return.png\")\r\n\r\n![enter image description here](https://lh6.googleusercontent.com/-08aqTV98xr4/VI3KycqLMWI/AAAAAAAABuE/3dAMVm_7iGM/s0/Signature.png \"Signature.png\")\r\n\r\n![enter image description here](https://lh4.googleusercontent.com/-JZyoxf4KpPI/VI3K5aNR4lI/AAAAAAAABuQ/hextNUY-KsI/s0/Signatures.png \"Signatures.png\")\r\n\r\n![enter image description here](https://lh5.googleusercontent.com/-XFfSVnlKOec/VI3K_pxJeMI/AAAAAAAABuc/shGusq9e-wI/s0/statement.png \"statement.png\")\r\n\r\n![enter image description here](https://lh6.googleusercontent.com/-slP5ZeGY_Ps/VI3LEz8RnqI/AAAAAAAABus/110quBbAYjU/s0/Statements.png \"Statements.png\")\r\n\r\n![enter image description here](https://lh6.googleusercontent.com/-GX4UGTtnyGc/VI3LJowuDvI/AAAAAAAABvE/NbG9_l3xURs/s0/vector2d.png \"vector2d.png\")\r\n\r\n![enter image description here](https://lh3.googleusercontent.com/-X9R3mEqp2C8/VI3LOHj5kCI/AAAAAAAABvQ/vYa44hQmuZE/s0/vectors.png \"vectors.png\")\r\n\r\n![enter image description here](https://lh6.googleusercontent.com/-t7rphKvCWYg/VI3LT7ChMtI/AAAAAAAABvc/SNu94oq-Orc/s0/whileStmt.png \"whileStmt.png\")\r\n\r\n\r\nList of supported tokens and inbuilt functions\r\n----------------------------------------------\r\n\r\n\r\n\r\n| Token(in Program)    | Internal Representation |\r\n| :------- | ----: |\r\n| while | TOKEN_WHILE |\r\n| != , <= , >= , &&  , ==   | TOKEN_OPERATOR |\r\n| ￼￼{     | TOKEN_BEGIN   | \r\n| ￼￼}     | TOKEN_END   |\r\n| ￼￼[    | BOX_OPEN |\r\n| ￼￼]    | BOX_CLOSE |\r\n| ￼￼func    | BEGIN_FUNC   |\r\n| ￼￼do    | TOKEN_DO   |\r\n| ￼￼if     | TOKEN_IF   |\r\n| ￼￼else     | TOKEN_ELSE   |\r\n| ￼￼vector     | TOKEN_VECTOR   |\r\n| ￼￼vector2d     | TOKEN_VECTOR2d   |\r\n| ￼￼return     | TOKEN_RETURN  |\r\n| ￼￼pow     | TOKEN_POW   |\r\n| acos    | TOKEN_ACOS|\r\n| ￼￼sqrt   | TOKEN_SQRT  |\r\n| ￼￼rotatez   | TOKEN_ROTATEZ |\r\n| ￼￼magnitude_squared    | TOKEN_MAGNITUDESQR  |\r\n| ￼￼transform   | TOKEN_TRANSFORM  |\r\n| min   | TOKEN_MIN  |\r\n| dot   | TOKEN_DOT |\r\n| cross  | TOKEN_CROSS |\r\n| [a-zA-Z_][a-zA-Z0-9_]*  | TOKEN_ID |\r\n| [-]?[0-9]*[.]?[0-9]+  | TOKEN_NUMBER  |\r\n| * , /, +, -, <, >, % | TOKEN_OPERATOR  |\r\n\r\nThe grammar in BNF form can be found in the developer documentation.\r\n\r\nLICENSE\r\n----------------------------------------------\r\n[MIT LICENSE](LICENSE.txt)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}